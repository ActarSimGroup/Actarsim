/////////////////////////////////////////////////////////////////
//*-- AUTHOR : Hector Alvarez-Pol hapol@fpddux.usc.es
//*-- Date: 11/2004
//*-- Last Update: 05/05/08
// --------------------------------------------------------------
// Description:
//   Actions to be performed before or after each event
//
// --------------------------------------------------------------
// Comments:
//
//   - 30/11/04 Created based on example/novice/N03 structure
// --------------------------------------------------------------
/////////////////////////////////////////////////////////////////

#include "ActarSimEventAction.hh"
#include "ActarSimEventActionMessenger.hh"

#include "ActarSimROOTAnalysis.hh"

#include "G4Event.hh"
#include "G4TrajectoryContainer.hh"
#include "G4VTrajectory.hh"
#include "G4VVisManager.hh"
#include "G4UnitsTable.hh"
#include "G4ThreeVector.hh"

#include "G4RunManager.hh"

#include "Randomize.hh"
#include <iomanip>

ActarSimEventAction::ActarSimEventAction()
  :drawFlag("all"), printModulo(1) {
  //
  // Constructor
  //
  eventMessenger = new ActarSimEventActionMessenger(this);
}


ActarSimEventAction::~ActarSimEventAction() {
  //
  // Destructor
  //
  delete eventMessenger;
}


void ActarSimEventAction::BeginOfEventAction(const G4Event* evt){
  //
  // At the beginning...
  //
  G4int evtNb = evt->GetEventID(); 

  const G4int verboseLevel = G4RunManager::GetRunManager()->GetVerboseLevel();
  if(verboseLevel>0){
    if (evtNb%printModulo == 0) {
      G4cout << "##################################################################"
	     << G4endl
	     << "########    ActarSimEventAction::BeginOfEventAction()   ##########"
	     << G4endl
	     << "########           Begin of event: " << evtNb << "        ########"<<  G4endl;
      CLHEP::HepRandom::showEngineStatus();
      G4cout << "##################################################################"
	     << G4endl;
    }
  }
  //TODO->Remove completely as soon as implemented in ROOTAnalGas
  // initialisation per event
  //energy1Gas = 0.;
  //energy2Gas = 0.;
  //trackL1Gas = 0.;
  //trackL2Gas = 0.;

 // Histogramming and other ROOT related actions
  if (gActarSimROOTAnalysis) gActarSimROOTAnalysis->BeginOfEventAction(evt);
}


void ActarSimEventAction::EndOfEventAction(const G4Event* evt) {
  //
  //  After the end of the event...
  //
  G4int evtNb = evt->GetEventID();

  if (evtNb%printModulo == 0){
    G4cout << "##################################################################"
	   << G4endl
	   << "#########    ActarSimEventAction::EndOfEventAction()   #########"
	   << G4endl
	   << "#### End of event: " << evtNb << G4endl;
    G4cout << "##################################################################"
	   << G4endl;
  }

  // Histogramming
  if(gActarSimROOTAnalysis)
    gActarSimROOTAnalysis->EndOfEventAction(evt);
/*
    gActarSimROOTAnalysis->EndOfEventAction(evt,
					       energy1Gas,
					       energy2Gas,
					       trackL1Gas,
					       trackL2Gas,
					       lastPrim2Position.getX(),
					       lastPrim2Position.getY(),
					       lastPrim2Position.getZ());
*/

  // extract the trajectories and draw them

  // You can get a default drawing without this code by using, e.g.,
  // /vis/scene/add/trajectories 1000
  // The code here adds sophistication under control of drawFlag.

  // See comments in G4VTrajectory::DrawTrajectory for the
  // interpretation of the argument, 1000.


  G4VVisManager* pVisManager = G4VVisManager::GetConcreteInstance();
  if (pVisManager)
    {
      G4TrajectoryContainer* trajectoryContainer = evt->GetTrajectoryContainer();
      G4int n_trajectories = 0;
      if (trajectoryContainer) n_trajectories = trajectoryContainer->entries();

      for (G4int i=0; i<n_trajectories; i++)
        { G4VTrajectory* trj = ((*(evt->GetTrajectoryContainer()))[i]);
	if (drawFlag == "all") pVisManager->Draw(*trj,1000);
	else if ((drawFlag == "charged")&&(trj->GetCharge() != 0.))
	  pVisManager->Draw(*trj,1000);
	else if ((drawFlag == "neutral")&&(trj->GetCharge() == 0.))
	  pVisManager->Draw(*trj,1000);
        }
    }

}

